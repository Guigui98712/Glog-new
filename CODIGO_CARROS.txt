=== CÓDIGO PARA ADICIONAR NO ARQUIVO src/services/ViagensService.ts ===

1. ADICIONAR ESTAS INTERFACES APÓS ContagemMensal (linha 23):

export interface Carro {
  id: number;
  nome: string;
  created_at: string;
}

export interface ContagemCarroMensal {
  mes: string;
  mesNum: number;
  ano: number;
  carros: {
    id: number;
    nome: string;
    total: number;
  }[];
}

2. ADICIONAR ESTES MÉTODOS NO FINAL DA CLASSE (antes do último }):

  // ===== MÉTODOS PARA GESTÃO DE CARROS =====

  async listarCarros(): Promise<Carro[]> {
    try {
      const { data, error } = await supabase
        .from('carros')
        .select('*')
        .order('nome', { ascending: true });

      if (error) throw new Error(`Erro ao buscar carros: ${error.message}`);
      return data || [];
    } catch (error) {
      throw error;
    }
  }

  async adicionarCarro(nome: string): Promise<Carro> {
    try {
      const { data, error } = await supabase
        .from('carros')
        .insert({ nome: nome.trim() })
        .select()
        .single();

      if (error) throw new Error(`Erro ao adicionar carro: ${error.message}`);
      return data;
    } catch (error) {
      throw error;
    }
  }

  async atualizarCarro(id: number, nome: string): Promise<void> {
    try {
      const { error } = await supabase
        .from('carros')
        .update({ nome: nome.trim() })
        .eq('id', id);

      if (error) throw new Error(`Erro ao atualizar carro: ${error.message}`);
    } catch (error) {
      throw error;
    }
  }

  async removerCarro(id: number): Promise<void> {
    try {
      const { error } = await supabase
        .from('carros')
        .delete()
        .eq('id', id);

      if (error) throw new Error(`Erro ao remover carro: ${error.message}`);
    } catch (error) {
      throw error;
    }
  }

  async marcarViagemComCarros(obraId: string, dataViagem: string, pessoas?: string, carrosIds?: number[]): Promise<void> {
    try {
      const { data: user } = await supabase.auth.getUser();
      if (!user.user) throw new Error('Usuário não autenticado');

      const { error } = await supabase
        .from('viagens')
        .insert({
          obra_id: parseInt(obraId),
          data: dataViagem,
          pessoas: pessoas || null,
          carros_ids: carrosIds || null
        });

      if (error && error.code !== '23505') {
        throw new Error(`Erro ao marcar viagem: ${error.message}`);
      }
    } catch (error) {
      throw error;
    }
  }

  async atualizarViagemComCarros(obraId: string, dataViagem: string, pessoas?: string, carrosIds?: number[]): Promise<void> {
    try {
      const { error } = await supabase
        .from('viagens')
        .update({
          pessoas: pessoas || null,
          carros_ids: carrosIds || null
        })
        .eq('obra_id', parseInt(obraId))
        .eq('data', dataViagem);

      if (error) throw new Error(`Erro ao atualizar viagem: ${error.message}`);
    } catch (error) {
      throw error;
    }
  }

=== FIM DO CÓDIGO PARA ViagensService.ts ===

INSTRUÇÕES:
1. Abra o arquivo src/services/ViagensService.ts
2. Copie e cole as interfaces após ContagemMensal
3. Copie e cole os métodos antes do } final da classe
4. Salve o arquivo
5. Me avise quando terminar para eu dar o código da página de viagens!
