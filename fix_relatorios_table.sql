-- Script para corrigir a estrutura da tabela relatorios

-- Verificar se a tabela existe e criar se não existir
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables 
                   WHERE table_schema = 'public' 
                   AND table_name = 'relatorios') THEN
        CREATE TABLE public.relatorios (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            obra_id BIGINT REFERENCES obras(id) ON DELETE CASCADE,
            data_inicio DATE NOT NULL,
            data_fim DATE NOT NULL,
            tipo VARCHAR(20) NOT NULL CHECK (tipo IN ('semanal', 'final')),
            conteudo TEXT,
            pdf_url TEXT,
            drive_folder_id TEXT,
            drive_file_id TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
        );
    END IF;
END $$;

-- Verificar e adicionar colunas necessárias
DO $$
BEGIN
    -- Verificar se a coluna data_inicio existe
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_schema = 'public' 
                   AND table_name = 'relatorios' 
                   AND column_name = 'data_inicio') THEN
        -- Se a coluna data existe, renomeá-la para data_inicio
        IF EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_schema = 'public' 
                   AND table_name = 'relatorios' 
                   AND column_name = 'data') THEN
            ALTER TABLE public.relatorios RENAME COLUMN data TO data_inicio;
        ELSE
            -- Se não existe nem data nem data_inicio, criar data_inicio
            ALTER TABLE public.relatorios ADD COLUMN data_inicio DATE;
        END IF;
    END IF;

    -- Adicionar coluna data_fim se não existir
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_schema = 'public' 
                   AND table_name = 'relatorios' 
                   AND column_name = 'data_fim') THEN
        ALTER TABLE public.relatorios ADD COLUMN data_fim DATE;
    END IF;

    -- Adicionar coluna conteudo se não existir
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_schema = 'public' 
                   AND table_name = 'relatorios' 
                   AND column_name = 'conteudo') THEN
        ALTER TABLE public.relatorios ADD COLUMN conteudo TEXT;
    END IF;

    -- Adicionar coluna tipo se não existir
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_schema = 'public' 
                   AND table_name = 'relatorios' 
                   AND column_name = 'tipo') THEN
        ALTER TABLE public.relatorios ADD COLUMN tipo VARCHAR(20) DEFAULT 'semanal';
    END IF;
END $$;

-- Criar índices se não existirem
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_indexes 
                   WHERE tablename = 'relatorios' 
                   AND indexname = 'idx_relatorios_obra_id') THEN
        CREATE INDEX idx_relatorios_obra_id ON public.relatorios(obra_id);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_indexes 
                   WHERE tablename = 'relatorios' 
                   AND indexname = 'idx_relatorios_data_inicio') THEN
        CREATE INDEX idx_relatorios_data_inicio ON public.relatorios(data_inicio);
    END IF;
END $$;

-- Habilitar RLS e criar políticas
DO $$
BEGIN
    -- Habilitar RLS
    ALTER TABLE public.relatorios ENABLE ROW LEVEL SECURITY;

    -- Remover políticas existentes para evitar duplicação
    DROP POLICY IF EXISTS "Permitir select para usuários autenticados" ON public.relatorios;
    DROP POLICY IF EXISTS "Permitir insert para usuários autenticados" ON public.relatorios;
    DROP POLICY IF EXISTS "Permitir update para usuários autenticados" ON public.relatorios;
    DROP POLICY IF EXISTS "Permitir delete para usuários autenticados" ON public.relatorios;
    
    -- Criar novas políticas
    CREATE POLICY "Permitir select para usuários autenticados"
        ON public.relatorios FOR SELECT
        TO authenticated
        USING (true);

    CREATE POLICY "Permitir insert para usuários autenticados"
        ON public.relatorios FOR INSERT
        TO authenticated
        WITH CHECK (true);

    CREATE POLICY "Permitir update para usuários autenticados"
        ON public.relatorios FOR UPDATE
        TO authenticated
        USING (true)
        WITH CHECK (true);

    CREATE POLICY "Permitir delete para usuários autenticados"
        ON public.relatorios FOR DELETE
        TO authenticated
        USING (true);
END $$; 